//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Game/InputSystem/UIInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UIInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UIInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UIInputActions"",
    ""maps"": [
        {
            ""name"": ""FIghtUI"",
            ""id"": ""6aaad1e6-f2c3-4a23-af33-44bb9faf1485"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""3423c606-b4e7-4d35-b7b3-e0f5d26aab79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchLeft"",
                    ""type"": ""Button"",
                    ""id"": ""c1cd60c0-e43b-4248-97fa-cda5f2290b93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchRight"",
                    ""type"": ""Button"",
                    ""id"": ""269b38e6-66cb-4cbb-8b33-255957749a11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d3904bc2-0ac3-41ad-b083-0dee1373651c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7558ee23-0f8f-4ba6-b72c-64b37718ef20"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90a1e2b3-9d71-46c0-a345-0fb460651eaf"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FIghtUI
        m_FIghtUI = asset.FindActionMap("FIghtUI", throwIfNotFound: true);
        m_FIghtUI_Pause = m_FIghtUI.FindAction("Pause", throwIfNotFound: true);
        m_FIghtUI_SwitchLeft = m_FIghtUI.FindAction("SwitchLeft", throwIfNotFound: true);
        m_FIghtUI_SwitchRight = m_FIghtUI.FindAction("SwitchRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FIghtUI
    private readonly InputActionMap m_FIghtUI;
    private List<IFIghtUIActions> m_FIghtUIActionsCallbackInterfaces = new List<IFIghtUIActions>();
    private readonly InputAction m_FIghtUI_Pause;
    private readonly InputAction m_FIghtUI_SwitchLeft;
    private readonly InputAction m_FIghtUI_SwitchRight;
    public struct FIghtUIActions
    {
        private @UIInputActions m_Wrapper;
        public FIghtUIActions(@UIInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_FIghtUI_Pause;
        public InputAction @SwitchLeft => m_Wrapper.m_FIghtUI_SwitchLeft;
        public InputAction @SwitchRight => m_Wrapper.m_FIghtUI_SwitchRight;
        public InputActionMap Get() { return m_Wrapper.m_FIghtUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FIghtUIActions set) { return set.Get(); }
        public void AddCallbacks(IFIghtUIActions instance)
        {
            if (instance == null || m_Wrapper.m_FIghtUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FIghtUIActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @SwitchLeft.started += instance.OnSwitchLeft;
            @SwitchLeft.performed += instance.OnSwitchLeft;
            @SwitchLeft.canceled += instance.OnSwitchLeft;
            @SwitchRight.started += instance.OnSwitchRight;
            @SwitchRight.performed += instance.OnSwitchRight;
            @SwitchRight.canceled += instance.OnSwitchRight;
        }

        private void UnregisterCallbacks(IFIghtUIActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @SwitchLeft.started -= instance.OnSwitchLeft;
            @SwitchLeft.performed -= instance.OnSwitchLeft;
            @SwitchLeft.canceled -= instance.OnSwitchLeft;
            @SwitchRight.started -= instance.OnSwitchRight;
            @SwitchRight.performed -= instance.OnSwitchRight;
            @SwitchRight.canceled -= instance.OnSwitchRight;
        }

        public void RemoveCallbacks(IFIghtUIActions instance)
        {
            if (m_Wrapper.m_FIghtUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFIghtUIActions instance)
        {
            foreach (var item in m_Wrapper.m_FIghtUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FIghtUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FIghtUIActions @FIghtUI => new FIghtUIActions(this);
    public interface IFIghtUIActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnSwitchLeft(InputAction.CallbackContext context);
        void OnSwitchRight(InputAction.CallbackContext context);
    }
}
